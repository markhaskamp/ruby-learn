(in c:/a_dev/ruby/ruby-learn)

Array
- '%w' creates an array by splitting string on whitespace
- 'length' returns number of elements in an array
- new Array has a length of 0
- use integer inside brackets, [n] to access array elements
- negative index number refers to array elements starting from the end (right), -1 is the last element
- get subarray with [index, number_of_elements]
- use '<<' to append elements to the end of an array

Array elements can be arbitrary expressions
- like addition
- like method calls

Array Methods
- 'include? returns true if the given object is present in the array

Environment Variables
- $LOAD_PATH is an array of directory paths
- default $LOAD_PATH includes '.'

Hash
- literals can be defined thusly '{:key => value, :key2 => value2}
- use [:key] to access elements of hash

Modules as namespaces
- reference module methods as 'module.method'
- instantiate a class nested in a Module as 'Module::Class.new'
- nested classes don't need the Module prefix to refer to Module constants
- nested classes don't need the Module prefix to refer to other nested classes

Modules as mixins
- after including module, module methods are available just like class methods

Modules mixin with Missiles
- should get a target
- launch for real
- launch a mock

Numeric
- 'minutes' should raise NoMethodError

Numeric methods
- 'abs' returns the absolute value of a number
- 'zero?' returns true if number == 0

Open Classes String
- 'capitalize' capitalizes the first character of the string
- 'yo' returns string 'whatitdo!'

Open Classes Numeric
- 'abs' returns the absolute value of a number
- 'minutes' multiplies self by 60

String methods
- 'capitalize' capitalizes the first character of the string
- 'capitalize' capitalizes only the first character of the first word of the string
- 'upcase' capitalizes all the characters of the string
- 'squeeze' replaces all concurrent dupe characters with a single instance of that character
- 'strip' removes leading and trailing whitespace from the string

Finished in 1.160067 seconds

34 examples, 0 failures
